{"ast":null,"code":"var _jsxFileName = \"/Users/emsilkina/Desktop/Projects/Github/BnFBansWebsite/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { db } from './firebase-config'; // Only import Firestore (db)\nimport { collection, getDocs } from 'firebase/firestore'; // Import Firestore functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [people, setPeople] = useState([]);\n  useEffect(() => {\n    // Fetch people data from Firestore when the component mounts\n    const fetchPeople = async () => {\n      const peopleCollection = collection(db, 'People'); // Specify your collection name\n      const peopleSnapshot = await getDocs(peopleCollection);\n      const peopleList = peopleSnapshot.docs.map(doc => ({\n        name: doc.id,\n        // Assuming each document has the person's name as the document ID\n        bans: 0 // Initialize bans as 0 (you can change this if you have a bans field in Firestore)\n      }));\n      setPeople(peopleList); // Set people state with fetched data\n    };\n    fetchPeople();\n  }, []); // Empty array ensures this effect runs only once on mount\n\n  const addBans = name => {\n    setPeople(prevPeople => prevPeople.map(person => person.name === name ? {\n      ...person,\n      bans: person.bans + 1\n    } : person));\n  };\n  const subtractBans = name => {\n    setPeople(prevPeople => prevPeople.map(person => person.name === name ? {\n      ...person,\n      bans: person.bans > 0 ? person.bans - 1 : person.bans\n    } : person));\n  };\n  const person = (name, bans) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [name, \" has \", bans, \" bans\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"my-button\",\n        onClick: () => subtractBans(name),\n        children: \"Subtract Bans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"my-button\",\n        onClick: () => addBans(name),\n        children: \"Add Bans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: people.map(personData => person(personData.name, personData.bans))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iLHt2u73MC8pQH7JexuLSo07ahk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","getDocs","jsxDEV","_jsxDEV","App","_s","people","setPeople","fetchPeople","peopleCollection","peopleSnapshot","peopleList","docs","map","doc","name","id","bans","addBans","prevPeople","person","subtractBans","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","personData","_c","$RefreshReg$"],"sources":["/Users/emsilkina/Desktop/Projects/Github/BnFBansWebsite/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { db } from './firebase-config'; // Only import Firestore (db)\nimport { collection, getDocs } from 'firebase/firestore'; // Import Firestore functions\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    // Fetch people data from Firestore when the component mounts\n    const fetchPeople = async () => {\n      const peopleCollection = collection(db, 'People'); // Specify your collection name\n      const peopleSnapshot = await getDocs(peopleCollection);\n      const peopleList = peopleSnapshot.docs.map(doc => ({\n        name: doc.id, // Assuming each document has the person's name as the document ID\n        bans: 0 // Initialize bans as 0 (you can change this if you have a bans field in Firestore)\n      }));\n      setPeople(peopleList); // Set people state with fetched data\n    };\n\n    fetchPeople();\n  }, []); // Empty array ensures this effect runs only once on mount\n\n  const addBans = (name) => {\n    setPeople(prevPeople =>\n      prevPeople.map(person =>\n        person.name === name\n          ? { ...person, bans: person.bans + 1 }\n          : person\n      )\n    );\n  };\n\n  const subtractBans = (name) => {\n    setPeople(prevPeople =>\n      prevPeople.map(person =>\n        person.name === name\n          ? { \n            ...person, \n            bans: person.bans > 0 ? person.bans - 1 : person.bans \n          }\n          : person\n      )\n    );\n  };\n\n  const person = (name, bans) => {\n    return (\n      <div key={name}>\n        <p>{name} has {bans} bans</p>\n        <button className=\"my-button\" onClick={() => subtractBans(name)}>\n          Subtract Bans\n        </button>\n        <button className=\"my-button\" onClick={() => addBans(name)}>\n          Add Bans\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {people.map(personData => person(personData.name, personData.bans))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}